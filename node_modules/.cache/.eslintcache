[{"D:\\Project\\drag-and-drop-gymtracker\\src\\index.tsx":"1","D:\\Project\\drag-and-drop-gymtracker\\src\\reportWebVitals.ts":"2","D:\\Project\\drag-and-drop-gymtracker\\src\\app\\App.tsx":"3","D:\\Project\\drag-and-drop-gymtracker\\src\\shared\\SharedUtils.ts":"4","D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\Taskboard.tsx":"5","D:\\Project\\drag-and-drop-gymtracker\\src\\shared\\SharedHooks.ts":"6","D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardTypes.ts":"7","D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardItemFormModal.tsx":"8","D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardCol.tsx":"9","D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardItemCard.tsx":"10","D:\\Project\\drag-and-drop-gymtracker\\src\\shared\\BaseTooltip.tsx":"11"},{"size":311,"mtime":1648585308308,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1648398979685,"results":"14","hashOfConfig":"13"},{"size":959,"mtime":1649346947459,"results":"15","hashOfConfig":"13"},{"size":93,"mtime":1649346963585,"results":"16","hashOfConfig":"13"},{"size":4161,"mtime":1649356078947,"results":"17","hashOfConfig":"13"},{"size":960,"mtime":1648398979686,"results":"18","hashOfConfig":"13"},{"size":173,"mtime":1648591532088,"results":"19","hashOfConfig":"13"},{"size":2566,"mtime":1649358974839,"results":"20","hashOfConfig":"13"},{"size":2602,"mtime":1649353980560,"results":"21","hashOfConfig":"13"},{"size":2561,"mtime":1649354579752,"results":"22","hashOfConfig":"13"},{"size":229,"mtime":1648398979686,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"92a2d8",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"D:\\Project\\drag-and-drop-gymtracker\\src\\index.tsx",[],[],["60","61"],"D:\\Project\\drag-and-drop-gymtracker\\src\\reportWebVitals.ts",[],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\app\\App.tsx",["62"],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\shared\\SharedUtils.ts",[],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\Taskboard.tsx",["63"],[],"import { DragDropContext, DragDropContextProps } from 'react-beautiful-dnd';\r\nimport { useMemo, useState } from 'react';\r\nimport produce from 'immer';\r\nimport styled from 'styled-components';\r\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\r\nimport TaskboardItemFormModal, {\r\n  TaskboardItemFormValues,\r\n} from './TaskboardItemFormModal';\r\nimport TaskboardCol, { TaskboardColProps } from './TaskboardCol';\r\nimport { useSyncedState } from '../shared/SharedHooks';\r\n\r\nconst generateId = () => Date.now().toString();\r\n\r\nconst TaskboardRoot = styled.div`\r\n  min-height: 0;\r\n  height: 100%;\r\n  width: 80%;\r\n  min-width: 800px;\r\n  max-width: 1400px;\r\n  margin: auto;\r\n`;\r\n\r\nconst TaskboardContent = styled.div`\r\n  height: 100%;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n`;\r\n\r\nconst defaultItems = {\r\n  [TaskboardItemStatus.TO_DO]: [],\r\n  [TaskboardItemStatus.DONE]: [],\r\n};\r\n\r\ntype TaskboardData = Record<TaskboardItemStatus, TaskboardItem[]>;\r\n\r\nfunction Taskboard() {\r\n  const [itemsByStatus, setItemsByStatus] = useSyncedState<TaskboardData>(\r\n    'itemsByStatus',\r\n    defaultItems\r\n  );\r\n\r\n  const handleDragEnd: DragDropContextProps ['onDragEnd'] = ({\r\n    source,\r\n    destination,\r\n  }) => {\r\n    setItemsByStatus((current) =>\r\n      produce(current, (draft) => {\r\n        if (!destination) {\r\n          return;\r\n        }\r\n        const [removed] = draft[\r\n          source.droppableId as TaskboardItemStatus\r\n        ].splice(source.index, 1);\r\n        draft[destination.droppableId as TaskboardItemStatus].splice(\r\n          destination.index,\r\n          0,\r\n          removed\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const [itemToEdit, setItemToEdit] = useState<TaskboardItem | null>(null);\r\n\r\n  const openTaskItemModal = (itemToEdit: TaskboardItem | null) => {\r\n    setItemToEdit(itemToEdit);\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const closeTaskItemModal = () => {\r\n    setItemToEdit(null);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleDelete: TaskboardColProps['onDelete'] = ({\r\n    status,\r\n    itemToDelete,\r\n  }) =>\r\n    setItemsByStatus((current) =>\r\n      produce(current, (draft) => {\r\n        draft[status] = draft[status].filter(\r\n          (item) => item.id !== itemToDelete.id\r\n        );\r\n      })\r\n    );\r\n\r\n  const initialValues = useMemo<TaskboardItemFormValues>(\r\n    () => ({\r\n      select: itemToEdit?.select ?? '',\r\n      description: itemToEdit?.description ?? '',\r\n    }),\r\n    [itemToEdit]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        <TaskboardRoot>\r\n          <TaskboardContent>\r\n            {Object.values(TaskboardItemStatus).map((status) => (\r\n              <TaskboardCol\r\n                key={status}\r\n                status={status}\r\n                items={itemsByStatus[status]}\r\n                onClickAdd={\r\n                  status === TaskboardItemStatus.TO_DO\r\n                    ? () => openTaskItemModal(null)\r\n                    : undefined\r\n                }\r\n                onEdit={openTaskItemModal}\r\n                onDelete={handleDelete}\r\n              />\r\n            ))}\r\n          </TaskboardContent>\r\n        </TaskboardRoot>\r\n      </DragDropContext>\r\n      <TaskboardItemFormModal\r\n        visible={isModalVisible}\r\n        onCancel={closeTaskItemModal}\r\n        onOk={(values) => {\r\n          setItemsByStatus((current) =>\r\n            produce(current, (draft) => {\r\n              if (itemToEdit) {\r\n                const draftItem = Object.values(draft)\r\n                  .flatMap((items) => items)\r\n                  .find((item) => item.id === itemToEdit.id);\r\n                if (draftItem) {\r\n                  draftItem.select = values.select;\r\n                  draftItem.description = values.description;\r\n                }\r\n              } else {\r\n                draft[TaskboardItemStatus.TO_DO].push({\r\n                  ...values,\r\n                  id: generateId(),\r\n                });\r\n              }\r\n            })\r\n          );\r\n        }}\r\n        initialValues={initialValues}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Taskboard;\r\n",["64","65"],"D:\\Project\\drag-and-drop-gymtracker\\src\\shared\\SharedHooks.ts",[],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardTypes.ts",[],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardItemFormModal.tsx",["66","67","68","69","70","71","72","73","74","75"],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardCol.tsx",["76","77","78","79","80","81","82","83"],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\taskboard\\TaskboardItemCard.tsx",["84","85","86"],[],"D:\\Project\\drag-and-drop-gymtracker\\src\\shared\\BaseTooltip.tsx",[],[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":30,"column":80,"nodeType":null,"messageId":"93","endLine":30,"endColumn":81,"fix":"94"},{"ruleId":"91","severity":1,"message":"92","line":42,"column":44,"nodeType":null,"messageId":"93","endLine":42,"endColumn":45,"fix":"95"},{"ruleId":"87","replacedBy":"96"},{"ruleId":"89","replacedBy":"97"},{"ruleId":"91","severity":1,"message":"98","line":2,"column":9,"nodeType":null,"messageId":"99","endLine":2,"endColumn":48,"fix":"100"},{"ruleId":"91","severity":1,"message":"101","line":54,"column":11,"nodeType":null,"messageId":"93","endLine":54,"endColumn":13,"fix":"102"},{"ruleId":"91","severity":1,"message":"101","line":55,"column":1,"nodeType":null,"messageId":"93","endLine":55,"endColumn":3,"fix":"103"},{"ruleId":"91","severity":1,"message":"101","line":56,"column":11,"nodeType":null,"messageId":"93","endLine":56,"endColumn":13,"fix":"104"},{"ruleId":"91","severity":1,"message":"105","line":57,"column":1,"nodeType":null,"messageId":"99","endLine":57,"endColumn":15,"fix":"106"},{"ruleId":"91","severity":1,"message":"101","line":58,"column":13,"nodeType":null,"messageId":"93","endLine":58,"endColumn":15,"fix":"107"},{"ruleId":"91","severity":1,"message":"101","line":59,"column":1,"nodeType":null,"messageId":"93","endLine":59,"endColumn":3,"fix":"108"},{"ruleId":"91","severity":1,"message":"101","line":60,"column":1,"nodeType":null,"messageId":"93","endLine":60,"endColumn":3,"fix":"109"},{"ruleId":"91","severity":1,"message":"101","line":61,"column":13,"nodeType":null,"messageId":"93","endLine":61,"endColumn":15,"fix":"110"},{"ruleId":"91","severity":1,"message":"111","line":62,"column":11,"nodeType":null,"messageId":"99","endLine":62,"endColumn":15,"fix":"112"},{"ruleId":"113","severity":1,"message":"114","line":6,"column":10,"nodeType":"115","messageId":"116","endLine":6,"endColumn":16},{"ruleId":"91","severity":1,"message":"117","line":7,"column":9,"nodeType":null,"messageId":"99","endLine":7,"endColumn":47,"fix":"118"},{"ruleId":"113","severity":1,"message":"119","line":7,"column":9,"nodeType":"115","messageId":"116","endLine":7,"endColumn":16},{"ruleId":"91","severity":1,"message":"92","line":12,"column":19,"nodeType":null,"messageId":"93","endLine":12,"endColumn":20,"fix":"120"},{"ruleId":"91","severity":1,"message":"92","line":16,"column":22,"nodeType":null,"messageId":"93","endLine":16,"endColumn":23,"fix":"121"},{"ruleId":"91","severity":1,"message":"101","line":17,"column":1,"nodeType":null,"messageId":"93","endLine":17,"endColumn":3,"fix":"122"},{"ruleId":"91","severity":1,"message":"123","line":23,"column":1,"nodeType":null,"messageId":"99","endLine":25,"endColumn":1,"fix":"124"},{"ruleId":"91","severity":1,"message":"125","line":55,"column":14,"nodeType":null,"messageId":"99","endLine":61,"endColumn":7,"fix":"126"},{"ruleId":"113","severity":1,"message":"127","line":2,"column":24,"nodeType":"115","messageId":"116","endLine":2,"endColumn":29},{"ruleId":"91","severity":1,"message":"128","line":4,"column":25,"nodeType":null,"messageId":"129","endLine":4,"endColumn":25,"fix":"130"},{"ruleId":"91","severity":1,"message":"131","line":16,"column":43,"nodeType":null,"messageId":"99","endLine":16,"endColumn":81,"fix":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"prettier/prettier","Delete `·`","delete",{"range":"135","text":"136"},{"range":"137","text":"136"},["133"],["134"],"Replace `Modal,·Form,·ModalProps,·Input,·Select,` with `·Modal,·Form,·ModalProps,·Input,·Select·`","replace",{"range":"138","text":"139"},"Delete `··`",{"range":"140","text":"136"},{"range":"141","text":"136"},{"range":"142","text":"136"},"Replace `··············` with `············`",{"range":"143","text":"144"},{"range":"145","text":"136"},{"range":"146","text":"136"},{"range":"147","text":"136"},{"range":"148","text":"136"},"Replace `··]}` with `]}␍⏎········`",{"range":"149","text":"150"},"@typescript-eslint/no-unused-vars","'colors' is defined but never used.","Identifier","unusedVar","Replace `Content}·from·\"antd/lib/layout/layout\"` with `·Content·}·from·'antd/lib/layout/layout'`",{"range":"151","text":"152"},"'Content' is defined but never used.",{"range":"153","text":"136"},{"range":"154","text":"136"},{"range":"155","text":"136"},"Replace `␍⏎`;␍⏎` with ``;`",{"range":"156","text":"157"},"Replace `␍⏎········onClickAdd·&&·(␍⏎··········<Button···onClick={onClickAdd}··>␍⏎············Add␍⏎··········</Button>␍⏎········)␍⏎······` with `onClickAdd·&&·<Button·onClick={onClickAdd}>Add</Button>`",{"range":"158","text":"159"},"'Modal' is defined but never used.","Insert `·`","insert",{"range":"160","text":"161"},"Replace `·($isDragging·?·'#cddeda'·:·'#DFEEEA')` with `␍⏎····$isDragging·?·'#cddeda'·:·'#DFEEEA'`",{"range":"162","text":"163"},"no-global-assign","no-unsafe-negation",[758,759],"",[1152,1153],[52,91]," Modal, Form, ModalProps, Input, Select ",[1291,1293],[1308,1310],[1343,1345],[1355,1369],"            ",[1432,1434],[1437,1439],[1464,1466],[1529,1531],[1545,1549],"]}\r\n        ",[351,389]," Content } from 'antd/lib/layout/layout'",[486,487],[573,574],[577,579],[667,673],"`;",[1220,1347],"onClickAdd && <Button onClick={onClickAdd}>Add</Button>",[197,197]," ",[580,618],"\r\n    $isDragging ? '#cddeda' : '#DFEEEA'"]