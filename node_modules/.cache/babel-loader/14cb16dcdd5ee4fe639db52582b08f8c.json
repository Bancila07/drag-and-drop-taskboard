{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sasab\\\\OneDrive\\\\Dokumenty\\\\drag-and-drop-taskboard\\\\src\\\\taskboard\\\\Taskboard.tsx\",\n    _s = $RefreshSig$();\n\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { useMemo, useState } from 'react';\nimport produce from 'immer';\nimport styled from 'styled-components';\nimport { TaskboardItemStatus } from './TaskboardTypes';\nimport TaskboardItemFormModal from './TaskboardItemFormModal';\nimport TaskboardCol from './TaskboardCol';\nimport { useSyncedState } from '../shared/SharedHooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst generateId = () => Date.now().toString();\n\nconst TaskboardRoot = styled.div`\n  min-height: 0;\n  height: 100%;\n  min-width: 800px;\n  max-width: 1400px;\n  margin: auto;\n`;\n_c = TaskboardRoot;\nconst TaskboardContent = styled.div`\n  height: 100%;\n  padding: 0.5rem;\n  display: flex;\n  justify-content: space-between;\n`;\n_c2 = TaskboardContent;\nconst defaultItems = {\n  [TaskboardItemStatus.TO_DO]: [],\n  [TaskboardItemStatus.DONE]: []\n};\n\nfunction Taskboard() {\n  _s();\n\n  const [itemsByStatus, setItemsByStatus] = useSyncedState('itemsByStatus', defaultItems);\n\n  const handleDragEnd = ({\n    source,\n    destination\n  }) => {\n    setItemsByStatus(current => produce(current, draft => {\n      if (!destination) {\n        return;\n      }\n\n      const [removed] = draft[source.droppableId].splice(source.index, 1);\n      draft[destination.droppableId].splice(destination.index, 0, removed);\n    }));\n  };\n\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [itemToEdit, setItemToEdit] = useState(null);\n\n  const openTaskItemModal = itemToEdit => {\n    setItemToEdit(itemToEdit);\n    setIsModalVisible(true);\n  };\n\n  const closeTaskItemModal = () => {\n    setItemToEdit(null);\n    setIsModalVisible(false);\n  };\n\n  const handleDelete = ({\n    status,\n    itemToDelete\n  }) => setItemsByStatus(current => produce(current, draft => {\n    draft[status] = draft[status].filter(item => item.id !== itemToDelete.id);\n  }));\n\n  const initialValues = useMemo(() => {\n    var _itemToEdit$select, _itemToEdit$descripti;\n\n    return {\n      select: (_itemToEdit$select = itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit.select) !== null && _itemToEdit$select !== void 0 ? _itemToEdit$select : '',\n      description: (_itemToEdit$descripti = itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit.description) !== null && _itemToEdit$descripti !== void 0 ? _itemToEdit$descripti : ''\n    };\n  }, [itemToEdit]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(TaskboardRoot, {\n        children: /*#__PURE__*/_jsxDEV(TaskboardContent, {\n          children: Object.values(TaskboardItemStatus).map(status => /*#__PURE__*/_jsxDEV(TaskboardCol, {\n            status: status,\n            items: itemsByStatus[status],\n            onClickAdd: status === TaskboardItemStatus.TO_DO ? () => openTaskItemModal(null) : undefined,\n            onDelete: handleDelete\n          }, status, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskboardItemFormModal, {\n      visible: isModalVisible,\n      onCancel: closeTaskItemModal,\n      onOk: values => {\n        setItemsByStatus(current => produce(current, draft => {\n          if (itemToEdit) {\n            // Editing existing item\n            const draftItem = Object.values(draft).flatMap(items => items).find(item => item.id === itemToEdit.id);\n\n            if (draftItem) {\n              draftItem.select = values.select;\n              draftItem.description = values.description;\n            }\n          } else {\n            // Adding new item as \"to do\"\n            draft[TaskboardItemStatus.TO_DO].push({ ...values,\n              id: generateId()\n            });\n          }\n        }));\n      },\n      initialValues: initialValues\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Taskboard, \"vgqDQHAzz/zSv265mU36A/i23cc=\", false, function () {\n  return [useSyncedState];\n});\n\n_c3 = Taskboard;\nexport default Taskboard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TaskboardRoot\");\n$RefreshReg$(_c2, \"TaskboardContent\");\n$RefreshReg$(_c3, \"Taskboard\");","map":{"version":3,"sources":["C:/Users/sasab/OneDrive/Dokumenty/drag-and-drop-taskboard/src/taskboard/Taskboard.tsx"],"names":["DragDropContext","useMemo","useState","produce","styled","TaskboardItemStatus","TaskboardItemFormModal","TaskboardCol","useSyncedState","generateId","Date","now","toString","TaskboardRoot","div","TaskboardContent","defaultItems","TO_DO","DONE","Taskboard","itemsByStatus","setItemsByStatus","handleDragEnd","source","destination","current","draft","removed","droppableId","splice","index","isModalVisible","setIsModalVisible","itemToEdit","setItemToEdit","openTaskItemModal","closeTaskItemModal","handleDelete","status","itemToDelete","filter","item","id","initialValues","select","description","Object","values","map","undefined","draftItem","flatMap","items","find","push"],"mappings":"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","sourcesContent":["import { DragDropContext, DragDropContextProps } from 'react-beautiful-dnd';\r\nimport { useMemo, useState } from 'react';\r\nimport produce from 'immer';\r\nimport styled from 'styled-components';\r\nimport { TaskboardItem, TaskboardItemStatus } from './TaskboardTypes';\r\nimport TaskboardItemFormModal, {\r\n  TaskboardItemFormValues,\r\n} from './TaskboardItemFormModal';\r\nimport TaskboardCol, { TaskboardColProps } from './TaskboardCol';\r\nimport { useSyncedState } from '../shared/SharedHooks';\r\n\r\nconst generateId = () => Date.now().toString();\r\n\r\nconst TaskboardRoot = styled.div`\r\n  min-height: 0;\r\n  height: 100%;\r\n  min-width: 800px;\r\n  max-width: 1400px;\r\n  margin: auto;\r\n`;\r\n\r\nconst TaskboardContent = styled.div`\r\n  height: 100%;\r\n  padding: 0.5rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst defaultItems = {\r\n  [TaskboardItemStatus.TO_DO]: [],\r\n  [TaskboardItemStatus.DONE]: [],\r\n};\r\n\r\ntype TaskboardData = Record<TaskboardItemStatus, TaskboardItem[]>;\r\n\r\nfunction Taskboard() {\r\n  const [itemsByStatus, setItemsByStatus] = useSyncedState<TaskboardData>(\r\n    'itemsByStatus',\r\n    defaultItems\r\n  );\r\n\r\n  const handleDragEnd: DragDropContextProps['onDragEnd'] = ({\r\n    source,\r\n    destination,\r\n  }) => {\r\n    setItemsByStatus((current) =>\r\n      produce(current, (draft) => {\r\n        if (!destination) {\r\n          return;\r\n        }\r\n        const [removed] = draft[\r\n          source.droppableId as TaskboardItemStatus\r\n        ].splice(source.index, 1);\r\n        draft[destination.droppableId as TaskboardItemStatus].splice(\r\n          destination.index,\r\n          0,\r\n          removed\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const [itemToEdit, setItemToEdit] = useState<TaskboardItem | null>(null);\r\n\r\n  const openTaskItemModal = (itemToEdit: TaskboardItem | null) => {\r\n    setItemToEdit(itemToEdit);\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const closeTaskItemModal = () => {\r\n    setItemToEdit(null);\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleDelete: TaskboardColProps['onDelete'] = ({\r\n    status,\r\n    itemToDelete,\r\n  }) =>\r\n    setItemsByStatus((current) =>\r\n      produce(current, (draft) => {\r\n        draft[status] = draft[status].filter(\r\n          (item) => item.id !== itemToDelete.id\r\n        );\r\n      })\r\n    );\r\n\r\n  const initialValues = useMemo<TaskboardItemFormValues>(\r\n    () => ({\r\n      select: itemToEdit?.select ?? '',\r\n      description: itemToEdit?.description ?? '',\r\n    }),\r\n    [itemToEdit]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        <TaskboardRoot>\r\n          <TaskboardContent>\r\n            {Object.values(TaskboardItemStatus).map((status) => (\r\n              <TaskboardCol\r\n                key={status}\r\n                status={status}\r\n                items={itemsByStatus[status]}\r\n                onClickAdd={\r\n                  status === TaskboardItemStatus.TO_DO\r\n                    ? () => openTaskItemModal(null)\r\n                    : undefined\r\n                }\r\n                onDelete={handleDelete}\r\n              />\r\n            ))}\r\n          </TaskboardContent>\r\n        </TaskboardRoot>\r\n      </DragDropContext>\r\n      <TaskboardItemFormModal\r\n        visible={isModalVisible}\r\n        onCancel={closeTaskItemModal}\r\n        onOk={(values) => {\r\n          setItemsByStatus((current) =>\r\n            produce(current, (draft) => {\r\n              if (itemToEdit) {\r\n                // Editing existing item\r\n                const draftItem = Object.values(draft)\r\n                  .flatMap((items) => items)\r\n                  .find((item) => item.id === itemToEdit.id);\r\n                if (draftItem) {\r\n                  draftItem.select = values.select;\r\n                  draftItem.description = values.description;\r\n                }\r\n              } else {\r\n                // Adding new item as \"to do\"\r\n                draft[TaskboardItemStatus.TO_DO].push({\r\n                  ...values,\r\n                  id: generateId(),\r\n                });\r\n              }\r\n            })\r\n          );\r\n        }}\r\n        initialValues={initialValues}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Taskboard;\r\n"]},"metadata":{},"sourceType":"module"}