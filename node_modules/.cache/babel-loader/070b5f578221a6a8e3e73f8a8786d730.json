{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sasab\\\\OneDrive\\\\Dokumenty\\\\drag-and-drop-taskboard\\\\src\\\\taskboard\\\\TaskboardItemFormModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nimport { Modal, Form, Input, Select } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TaskboardItemFormModal({\n  visible,\n  initialValues,\n  onCancel,\n  onOk\n}) {\n  _s();\n\n  const [form] = Form.useForm();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (visible) {\n      var _inputRef$current;\n\n      // Focus on the first input when the modal is opened\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      form.resetFields();\n    }\n  }, [form, visible]);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Add Item\",\n    visible: visible,\n    destroyOnClose: true // To make dynamically changing initialValues work with Form\n    ,\n    forceRender: true,\n    onCancel: onCancel,\n    onOk: () => form.submit(),\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      form: form,\n      layout: \"vertical\",\n      initialValues: initialValues,\n      onFinish: values => {\n        onOk(values);\n        form.resetFields();\n        onCancel();\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Select\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          children: [/*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"monday\",\n            children: \"Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"demo\",\n            children: \"Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"demo\",\n            children: \"Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"demo\",\n            children: \"Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"demo\",\n            children: \"Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"demo\",\n            children: \"Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: \"demo\",\n            children: \"Demo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"description\",\n        label: \"Description\",\n        rules: [{\n          required: true,\n          message: \"'Description' is required\"\n        }, {\n          max: 400,\n          message: \"'Description' can not be longer than 400 characters\"\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          rows: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskboardItemFormModal, \"3PXihbjiuZ8Wn/s0/JQsqNYpQwQ=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = TaskboardItemFormModal;\nexport default TaskboardItemFormModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskboardItemFormModal\");","map":{"version":3,"sources":["C:/Users/sasab/OneDrive/Dokumenty/drag-and-drop-taskboard/src/taskboard/TaskboardItemFormModal.tsx"],"names":["useEffect","useRef","Modal","Form","Input","Select","TaskboardItemFormModal","visible","initialValues","onCancel","onOk","form","useForm","inputRef","current","focus","resetFields","submit","values","required","message","max"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { Modal, Form, ModalProps, Input, Select } from 'antd';\r\nimport { TaskboardItem } from './TaskboardTypes';\r\n\r\nexport type TaskboardItemFormValues = Pick<\r\n  TaskboardItem,\r\n  'title' | 'description'\r\n>;\r\n\r\ntype TaskboardItemFormModalProps = Pick<ModalProps, 'visible'> & {\r\n  initialValues: TaskboardItemFormValues;\r\n  onCancel: VoidFunction;\r\n  onOk: (values: TaskboardItemFormValues) => void;\r\n};\r\n\r\nfunction TaskboardItemFormModal({\r\n  visible,\r\n  initialValues,\r\n  onCancel,\r\n  onOk,\r\n}: TaskboardItemFormModalProps) {\r\n  const [form] = Form.useForm<TaskboardItemFormValues>();\r\n\r\n  const inputRef = useRef<Input>(null);\r\n\r\n  useEffect(() => {\r\n    if (visible) {\r\n      // Focus on the first input when the modal is opened\r\n      inputRef.current?.focus();\r\n      form.resetFields();\r\n    }\r\n  }, [form, visible]);\r\n\r\n  return (\r\n    <Modal\r\n      title=\"Add Item\"\r\n      visible={visible}\r\n      destroyOnClose\r\n      // To make dynamically changing initialValues work with Form\r\n      forceRender\r\n      onCancel={onCancel}\r\n      onOk={() => form.submit()}\r\n    >\r\n      <Form\r\n        autoComplete=\"off\"\r\n        form={form}\r\n        layout=\"vertical\"\r\n        initialValues={initialValues}\r\n        onFinish={(values) => {\r\n          onOk(values);\r\n          form.resetFields();\r\n          onCancel();\r\n        }}\r\n      >\r\n        <Form.Item label=\"Select\">\r\n          <Select>\r\n            <Select.Option value=\"monday\">Demo</Select.Option>\r\n            <Select.Option value=\"demo\">Demo</Select.Option>\r\n            <Select.Option value=\"demo\">Demo</Select.Option>\r\n            <Select.Option value=\"demo\">Demo</Select.Option>\r\n            <Select.Option value=\"demo\">Demo</Select.Option>\r\n            <Select.Option value=\"demo\">Demo</Select.Option>\r\n            <Select.Option value=\"demo\">Demo</Select.Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Description\"\r\n          rules={[\r\n            { required: true, message: \"'Description' is required\" },\r\n            {\r\n              max: 400,\r\n              message: \"'Description' can not be longer than 400 characters\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input.TextArea rows={4} />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default TaskboardItemFormModal;\r\n"]},"metadata":{},"sourceType":"module"}